function init(self)
	-- Add initialization code here
	-- Remove this function if not needed
	msg.post(".", "acquire_input_focus")
	msg.post("#", "show_level_select")
	self.active = false

	label.set_text("#ScreenHeader", "NEW HIGH SCORE")

--	char = "A"
--	char = char + 1

--	gui.set_position( gui.get_node("Char0"), vmath.vector3( 180, 360, 1) )
--	gui.set_text( gui.get_node("Char_Text0"), char )	

	screenX = 18
	screenY = 450-40
	for n = 0, 64 do
		gui.set_position(  gui.get_node( string.format("Char%d", n) ), vmath.vector3(screenX, screenY, 1)  )

		if (n < 26) then
			gui.set_text(  gui.get_node( string.format("Char_Text%d", n) ), string.format("%c", 65+n)  )
		elseif (n < 52) then
			gui.set_text(  gui.get_node( string.format("Char_Text%d", n) ), string.format("%c", 97+n-26)  )
		elseif (n < 52+10) then
			gui.set_text(  gui.get_node( string.format("Char_Text%d", n) ), string.format("%c", 48+n-52)  )
		elseif (n == 62) then
			gui.set_text(  gui.get_node( string.format("Char_Text%d", n) ), "+"  )
		elseif (n == 63) then
			gui.set_text(  gui.get_node( string.format("Char_Text%d", n) ), "_"  )
		elseif (n == 64) then
			gui.set_text(  gui.get_node( string.format("Char_Text%d", n) ), "<"  )
		end
				
		

		screenX = screenX + 27
		if ( screenX >= (13*27) ) then
			screenY = screenY - 65
			screenX = 18
		end
	end
		
	if (Platform == Platform_HTMLfive) then
		gui.set_adjust_mode( gui.get_node("ButtonExit"), gui.ADJUST_FIT )
	end
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
	if message_id == hash("show_level_select") then
		msg.post("#", "enable")
		self.active = true
	elseif message_id == hash("hide_level_select") then
		msg.post("#", "disable")
		self.active = false
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
	local m = require "data/modules.StopMusic"
	local mTwo = require "data/modules.PlayMusic"

	local node

--	ArrowClicked = -1

	if action_id == hash("EnterGUI") then
		if (ButtonSelectedByKeyboard == 0) then
			node = gui.get_node("ButtonExit")
		end

		if (ScreenFadeAlpha == 0) then
			gui.set_scale( node, vmath.vector3(0.85, 0.85, 1) )

			msg.post("level:/Audio#MenuClick", "play_sound", {delay = 0, gain = EffectsVolume})

			m.StopMusic(CurrentMusicPlaying)--MusicTestBGM)

			msg.post("level:/Audio#Title-BGM", "play_sound", {delay = 0, gain = 1})
			
			NextScreen = 5

			ScreenFadeStatus = 1

			ButtonClicked = node
			ScreenFadeAlphaHalf = 0.5
		end
	end

	ButtonClicked = -1

	if action_id == hash("ClickGUI") and action.pressed and self.active then
		node = gui.get_node("ButtonExit")
		if gui.pick_node(node, action.x, action.y) then
			if (ScreenFadeAlpha == 0) then
				gui.set_scale( node, vmath.vector3(0.85, 0.85, 1) )

				msg.post("level:/Audio#MenuClick", "play_sound", {delay = 0, gain = EffectsVolume})

				m.StopMusic(CurrentMusicPlaying)--MusicTestBGM)

				msg.post("level:/Audio#Title-BGM", "play_sound", {delay = 0, gain = 1})

				NextScreen = 5
				ScreenFadeStatus = 1

				ButtonClicked = node
				ScreenFadeAlphaHalf = 0.5
			end
		end
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
