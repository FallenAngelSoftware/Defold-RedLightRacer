function init(self)
	CurrentScreen = 2
	NextScreen = 3
	ScreenFadeStatus = 0
	ScreenFadeAlpha = 1
	label.set_text("#TitleHighScoreName", "''" .. HighScoresName[GameMode][0] .. "''")
	label.set_text("#TitleHighScore", HighScoresScore[GameMode][0])
	ButtonSelectedByKeyboard = 0
	ArrowsSelectedByKeyboard = 0
	
	if (PlayRedLightRacerVoice == true) then
		msg.post("level:/Audio#RedLightRacer", "play_sound", {delay = 0, gain = EffectsVolume})
		PlayRedLightRacerVoice = false
	end
	
	local GameOptionsAndHighScoresTable = {}
	table.insert(GameOptionsAndHighScoresTable, MusicVolume)
	table.insert(GameOptionsAndHighScoresTable, EffectsVolume)
	table.insert(GameOptionsAndHighScoresTable, GameMode)
	for mode = 0, 2 do
		for rank = 0, 9 do
			table.insert(GameOptionsAndHighScoresTable, HighScoresName[mode][rank])
			table.insert(GameOptionsAndHighScoresTable, HighScoresLevel[mode][rank])
			table.insert(GameOptionsAndHighScoresTable, HighScoresScore[mode][rank])
		end
	end

	table.insert(GameOptionsAndHighScoresTable, SecretCode[0])
	table.insert(GameOptionsAndHighScoresTable, SecretCode[1])
	table.insert(GameOptionsAndHighScoresTable, SecretCode[2])
	table.insert(GameOptionsAndHighScoresTable, SecretCode[3])
				
	local my_file_path = sys.get_save_file("RedLightRacer", "RLR_Alpha1.cfg")
	if not sys.save(my_file_path, GameOptionsAndHighScoresTable) then
		print("Save Failed!")
	end

	DelayAllUserInput = 50
	
	msg.post(".", "acquire_input_focus")
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if (DelayAllUserInput > 0) then
		DelayAllUserInput = (DelayAllUserInput - 1)
	end

	local FPSAMXY = require "data/modules.FPSandMouseXY"
	FPSAMXY.UpdateFPSandMouseXY(dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show_level_select") then
		msg.post("#", "enable")
		self.active = true
	elseif message_id == hash("hide_level_select") then
		msg.post("#", "disable")
		self.active = false
	end
end

function on_input(self, action_id, action)
	mX = action.screen_x
	mY = action.screen_y	
end

function on_reload(self)
end